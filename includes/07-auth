<h1 id='authentication-and-authorization'>Authentication and Authorization</h1>
<p>Authorization in Booster is done through roles. Every Command (and in the future, every ReadModel)
has an <code>authorize</code> policy that tells Booster who can execute or access it. The policy is specified in the
<code>@Command</code> decorator and consists of one of the following two values:</p>

<ul>
<li><code>&#39;all&#39;</code>: Meaning that the command is public: any user, both authenticated and anonymous, can execute it.</li>
<li>An array of authorized roles <code>[Role1, Role2, ...]</code>: This means that only those authenticated users that
have any of the roles listed there are authorized to execute the command</li>
</ul>

<p>For example, the following command can be executed by anyone:</p>
<pre class="highlight typescript tab-typescript"><code><span class="p">@</span><span class="nd">Command</span><span class="p">({</span>
  <span class="na">authorize</span><span class="p">:</span> <span class="s1">'all'</span><span class="p">,</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">CreateComment</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre>
<p>While this one can be executed by authenticated users that have the role <code>Admin</code> or <code>User</code>:</p>
<pre class="highlight typescript tab-typescript"><code><span class="p">@</span><span class="nd">Command</span><span class="p">({</span>
  <span class="na">authorize</span><span class="p">:</span> <span class="p">[</span><span class="nx">Admin</span><span class="p">,</span> <span class="nx">User</span><span class="p">],</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">UpdateUser</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre>
<p>By default, a Booster application has no roles defined, so the only allowed value you can use in the <code>authorize</code> policy is <code>&#39;all&#39;</code> (good for public APIs).
If you want to add user authorization, you first need to create the roles that are suitable for your application.
Roles are classes annotated with the <code>@Role</code> decorator, where you can specify some attributes.</p>

<p>This is an example of a definition of two roles:</p>
<pre class="highlight typescript tab-typescript"><code><span class="p">@</span><span class="nd">Role</span><span class="p">({</span>
  <span class="na">allowSelfSignUp</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">Admin</span> <span class="p">{}</span>

<span class="p">@</span><span class="nd">Role</span><span class="p">({</span>
  <span class="na">allowSelfSignUp</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kr">class</span> <span class="nx">User</span> <span class="p">{}</span>
</code></pre>
<p>Here, we have defined the <code>Admin</code> and <code>User</code> roles. The former contains the following attribute <code>allowSelfSignUp: false</code>,
which means that when users sign-up, they can&#39;t specify the role <code>Admin</code> as one of its roles.
The latter has this attribute set to <code>true</code>, which means that any user can self-assign the role <code>User</code> when signing up.</p>

<p>If your Booster application has roles defined, an authentication API will be provisioned. It will allow your users to gain
access to your resources.</p>

<p>This API consists of three endpoints (<a href="09-rest-api.md">see the API documentation</a>):</p>

<ul>
<li><code>/auth/sign-up</code>: Users can use this endpoint to register in your application and get some roles assigned to them.
Only roles with the attribute <code>allowSelfSignUp: true</code> can be specified upon sign-up. After calling this endpoint, the
registration is not yet finished. Users need to confirm their emails by clicking in the link that will be sent to their
inbox. </li>
</ul>

<p><img src="/images/../img/sign-up-verificaiton-email.png" alt="Confirmation email" /> <img src="/images/../img/sign-up-confirmed.png" alt="Email confirmed" />
- <code>/auth/sign-in</code>: This endpoint creates a session for an already registered user, returning an access token that
  can be used to access role-protected resources (like Commands)
- <code>/auth/sign-out</code>: Users can call this endpoint to finish the session.</p>

<p>Once a user has an access token, it can be included in any request made to your Booster application as a
Bearer Authorization header (<code>Authorization: Bearer</code>). It will be used to get the user information and
authorize it to access protected resources.</p>

<p>Continue reading about <a href="08-deployment.md">how to deploy your application</a></p>
